--Lesson 12. Joining Tables

/*One of SQL’s most powerful features is the capability to join tables on-the-fly within data retrieval queries. Joins are one of the most important operations that
you can perform using SQLSELECT, and a good understanding of joins and join
syntax is an extremely important part of learning SQL. */SELECT vend_name, prod_name, prod_priceFROM Vendors, ProductsWHERE Vendors.vend_id = Products.vend_id;--Sometimes you’ll hear the type of join that returns a Cartesian Product
--referred to as a cross join.SELECT vend_name, prod_name, prod_priceFROM VendorsINNER JOIN Products ON Vendors.vend_id = Products.vend_id;SELECT prod_name, vend_name, prod_price, quantityFROM OrderItems, Products, VendorsWHERE Products.vend_id = Vendors.vend_idAND OrderItems.prod_id = Products.prod_idAND order_num = 20007;SELECT cust_name, cust_contactFROM Customers, Orders, OrderItemsWHERE Customers.cust_id = Orders.cust_idAND OrderItems.order_num = Orders.order_numAND prod_id = 'RGAN01';SELECT cust_name, order_numFROM Orders, CustomersWHERE Orders.cust_id = Customers.cust_idORDER BY cust_name, order_num;  --challenge 1SELECT cust_name, order_numFROM OrdersINNER JOIN Customers ON Customers.cust_id = Orders.cust_idORDER BY cust_name, order_num;SELECT cust_name, Orders.order_num, SUM(quantity*item_price) AS OrderTotalFROM Orders, Customers, OrderItemsWHERE Customers.cust_id = Orders.cust_id AND Orders.order_num = OrderItems.order_numGROUP BY cust_name, Orders.order_numORDER BY cust_name, Orders.order_num;  --challenge 2SELECT cust_name,        Orders.order_num,	   (SELECT SUM(quantity*item_price) AS OrderTotal		FROM OrderItems		WHERE OrderItems.order_num = Orders.order_num) AS OrderTotalFROM Orders, CustomersWHERE Customers.cust_id = Orders.cust_idORDER BY cust_name, Orders.order_num;SELECT cust_id, order_dateFROM OrderItems, OrdersWHERE OrderItems.order_num = Orders.order_numAND prod_id = 'BR01'ORDER BY order_date;  --challenge 3SELECT cust_emailFROM CustomersINNER JOIN Orders ON Customers.cust_id = Orders.cust_idINNER JOIN OrderItems ON Orders.order_num = OrderItems.order_numAND prod_id = 'BR01';  --challenge 4SELECT cust_name, SUM(quantity*item_price) AS total_priceFROM Customers, Orders, OrderItemsWHERE Customers.cust_id = Orders.cust_idAND Orders.order_num = OrderItems.order_numGROUP BY cust_nameHAVING SUM(quantity*item_price) >= 1000ORDER BY cust_name;  --challenge 5SELECT cust_name, SUM(quantity*item_price) AS total_priceFROM CustomersINNER JOIN Orders ON Customers.cust_id = Orders.cust_idINNER JOIN OrderItems ON Orders.order_num = OrderItems.order_numGROUP BY cust_nameHAVING SUM(quantity*item_price) >= 1000ORDER BY cust_name;