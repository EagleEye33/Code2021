	// Assignment #: Arizona State University CSE205 #7
//  Name: Wyatt Colyn	
//StudentID: 121-547-4364
//Lecture: TTh 4:30-5:45
//Description: The DrawPane class creates a canvas where we can use
//        mouse key to draw either a Rectangle or a Circle with different
//        colors. We can also use the the two buttons to erase the last
//			 drawn shape or clear them all.

//import any classes necessary here
//----
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.TilePane;
import javafx.scene.layout.VBox;
import javafx.scene.shape.Shape;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Circle;
import javafx.scene.paint.Color;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.geometry.Orientation;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.input.MouseEvent;

import java.util.ArrayList;

public class DrawPane extends BorderPane
{
private Button button1, button2;
private ComboBox<String> colorCombo;
private RadioButton rbutton1, rbutton2;
private ArrayList<Shape> shapeList;
private Pane canvas;
private VBox vb;
//declare any other necessary instance variables here
//----

//Constructor
public DrawPane()
{
//Step #1: initialize each instance variable and set up layout
	GridPane gp2 = new GridPane();
	BorderPane bp = new BorderPane();
	button1 = new Button("Undo");
	button2 = new Button("Erase");
	button1.setMinWidth(80.0);
	button2.setMinWidth(80.0);
	HBox hb = new HBox(10);
	hb.getChildren().addAll(button1, button2);

TilePane tp = new TilePane();
vb = new VBox();
vb.setPadding(new Insets(10, 10, 10, 10));
vb.setSpacing(25);
vb.setStyle("-fx-padding: 10;" + 
        "-fx-border-style: solid inside;" + 
        "-fx-border-width: 2;" +
        "-fx-border-insets: 5;" + 
        "-fx-border-radius: 5;" + 
        "-fx-border-color: black;");
tp.getChildren().add(vb);
//Create the color comboBox and initial its default color
//----
colorCombo = new ComboBox<String>();
colorCombo.getItems().addAll("Black","Blue","Green","Red","Yellow","Orange","Pink");
colorCombo.setValue("Black");
colorCombo.setMinWidth(100);




//Create the two radio buttons and also a ToggleGroup
//so that the two radio buttons can be selected
//mutually exclusively. Otherwise they are independent of each other
//----
ToggleGroup group1 = new ToggleGroup();

rbutton1 = new RadioButton("Rectangle");
rbutton1.setToggleGroup(group1);
rbutton1.setMinWidth(80);
rbutton1.setSelected(true);
rbutton2 = new RadioButton("Circle");
rbutton2.setToggleGroup(group1);
rbutton2.setMinWidth(80);

//initialize shapeList, it is a data structure we used
//to track the shape we created
shapeList = new ArrayList<Shape>();

//canvas is a Pane where we will draw rectangles and circles on it
GridPane gp3 = new GridPane();
canvas = new Pane();
canvas.setStyle("-fx-background-color: beige;");
canvas.setMinWidth(400);
canvas.setMinHeight(400);
gp3.getChildren().add(canvas);

//initialize the remaining instance variables and set up
//the layout
gp2.getChildren().add(hb);
vb.getChildren().addAll(colorCombo, rbutton1, rbutton2);
bp.setLeft(tp);
bp.setBottom(gp2);
bp.setCenter(gp3);
this.getChildren().addAll(bp);

//Step #3: Register the source nodes with its handler objects
canvas.setOnMousePressed(new MouseHandler());
//----
//----


}

//Step #2(A) - MouseHandler
private class MouseHandler implements EventHandler<MouseEvent>
{
public void handle(MouseEvent event)
{
	 //handle MouseEvent here
	 //Note: you can use if(event.getEventType()== MouseEvent.MOUSE_PRESSED)
	 //to check whether the mouse key is pressed, dragged or released
	 //write your own codes here
	 //----





}//end handle()
}//end MouseHandler

//Step #2(B)- A handler class used to handle events from Undo & Erase buttons
private class ButtonHandler implements EventHandler<ActionEvent>
{
public void handle(ActionEvent event)
{
	  //write your codes here
	  //----



}
}//end ButtonHandler

//Step #2(C)- A handler class used to handle events from the two radio buttons
private class ShapeHandler implements EventHandler<ActionEvent>
{
public void handle(ActionEvent event)
{
	  //write your own codes here
	  //----



}
}//end ShapeHandler

//Step #2(D)- A handler class used to handle colors from the combo box
private class ColorHandler implements EventHandler<ActionEvent>
{
public void handle(ActionEvent event)
{
	  //write your own codes here
	  //----

}
}//end ColorHandler

}//end class DrawPane

